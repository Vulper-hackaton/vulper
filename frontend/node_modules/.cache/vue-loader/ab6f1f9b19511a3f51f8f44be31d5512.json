{"remainingRequest":"/home/pedro/Desktop/hackaton/vulper/vulper/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/pedro/Desktop/hackaton/vulper/vulper/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/pedro/Desktop/hackaton/vulper/vulper/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pedro/Desktop/hackaton/vulper/vulper/frontend/src/views/EditBroker.vue?vue&type=template&id=04b3dabd&scoped=true&","dependencies":[{"path":"/home/pedro/Desktop/hackaton/vulper/vulper/frontend/src/views/EditBroker.vue","mtime":1588499469820},{"path":"/home/pedro/Desktop/hackaton/vulper/vulper/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pedro/Desktop/hackaton/vulper/vulper/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/pedro/Desktop/hackaton/vulper/vulper/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pedro/Desktop/hackaton/vulper/vulper/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}